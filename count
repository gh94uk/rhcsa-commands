getent passwd username
Create an indirect autofs mapping
vi /etc/auto.master.d/indirect.autofs
/mountpoint   /etc/auto.indirect   --timeout=60
vi /etc/auto.indirect
*    rw,sync,root_squash,no_subtree_check   servername:/mountpoint/&  
Create a direct autofs mapping
vi /etc/auto.master.d/direct.autofs   --timeout=60
/-   /etc/auto.direct
vi /etc/auto.direct
/mountpoint   rw,sync,root_squash,no_subtree_check   servername:/mountpoint
Create an indirect autofs CIFS mapping
vi /etc/auto.direct
/mountpoint   -fstype=cifs,credentials=file,uid=username,noserverino,vers=2.0   servername:/mountpoint
List available CIFS shares
smbclient -L servername
Show available mount points on a NFS server
showmount -e servername
Manually mount the NFS share "sales" on server1.example.com to /sales
mount -t nfs server2.example.com:/sales /sales
Which fstab option is used to ensure a networked share only starts on boot when the network is available?
_netdev
Manually mount the CIFS share "data" on server2.example.com to /data with the username pete
mount -t cifs -o username=pete //server1.example.com:/data /data
 
 
Firewall Configuration
List all firewall rules
firewall-cmd --list-all
Permanently allow http and https through the firewall in the public zone
firewall-cmd --permanent --add-service={http,https} --zone=public
Set the default zone to DMZ
firewall-cmd --set-default-zone=dmz
Permanently allow port 8080 through the firewall
firewall-cmd --permanent --add-port=8080/tcp
Allow the 172.16.1.0/24 network through the firewall to access the 10.1.0.99 server via ports 8080-8090
firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address=172.16.1.0/24 destination address=10.1.0.99/32 port port=8080-8090 protocol=tcp accept'
Activate masquerade in the desired zone
firewall-cmd --zone=public --add-masquerade
Permanently forward port 22 onto port 2222
firewall-cmd --permanent --zone="public" --add-forward-port=port=22:proto=tcp:toport=2222
 
Virtualization and Kickstart
Check if the server supports virtualization
egrep 'vmx|svm' /proc/cpuinfo
Check the kvm kernel module exists
lsmod | grep kvm
Install the kickstart validator tool
yum install pykickstarter
View the kickstart documentation
cat /usr/share/doc/pykickstart-*/kickstart-docs.rst
Verify the differences in kickstart from RHEL6 to RHEL7
ksverdiff -f RHEL6 -t RHEL7
View the system's auto-generated kickstart file
cat /root/anaconda-ks.cfg
Install the packages required for virtualization
yum group install "Virtualization Host" "Virtualizaton Client"
Install the individual packages required for virtualization
yum install kvm libvirt virt-manager qemu-kvm -y
Convert a vmdk file to a qcow2 file
qemu-img convert -O file.vmdk file.qcow2 
